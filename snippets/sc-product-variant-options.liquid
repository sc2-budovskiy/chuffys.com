{% comment %}
  Renders product variant options

  Accepts:
  - product: {Object} product object.
  - option: {Object} current product_option object.
  - block: {Object} block object.
  - type: {String}


  Usage:
  {% render 'sc-product-variant-options',
    product: product,
    option: option,
    block: block,
    type: type,
    loop_subscriptions_block: loop_subscriptions_block
  %}
{% endcomment %}
{%- liquid
  assign variants_available_arr = product.variants | map: 'available'
  assign variants_option1_arr = product.variants | map: 'option1'
  assign variants_option2_arr = product.variants | map: 'option2'
  assign variants_option3_arr = product.variants | map: 'option3'

  assign product_form_id = 'product-form-' | append: section.id
  if custom_product_form_id != blank
    assign product_form_id = custom_product_form_id
  endif

  assign custom_colors_arr = block.settings.swatches_custom_colors_list | split: ','
  assign predefined_colors = settings.swatches_predefined_colors_list | split: '</p><p>'

  if type == 'quantity-breaks'
    assign badges = block.settings.breaks_badges | split: ','
    assign labels = block.settings.breaks_labels | split: ','
    assign benefits = block.settings.breaks_benefits | split: ','
    assign captions = block.settings.breaks_captions | split: ','
    assign price_texts = block.settings.breaks_price_texts | split: ','
    assign compare_price_texts = block.settings.breaks_compare_price_texts | split: ','
    if block.settings.breaks_displayed_images == 'custom'
      assign custom_images = block.settings.breaks_custom_images | split: ','
    endif
  endif
-%}

{% assign final_benefits = false %}

<!-- snippets/sc-product-variant-options.liquid v0.1 -->
{%- for value in option.values -%}
  {%- liquid
    assign option_class = ''
    assign option_disabled = true
    assign option_index = forloop.index0
    assign option_exists = false

    for option1_name in variants_option1_arr
      case option.position
        when 1
          if variants_option1_arr[forloop.index0] == value
            assign option_exists = true
            if variants_available_arr[forloop.index0]
              assign option_disabled = false
            endif
          endif
        when 2
          if option1_name == product.selected_or_first_available_variant.option1 and variants_option2_arr[forloop.index0] == value
            assign option_exists = true
            if variants_available_arr[forloop.index0]
              assign option_disabled = false
            endif
          endif
        when 3
          if option1_name == product.selected_or_first_available_variant.option1 and variants_option2_arr[forloop.index0] == product.selected_or_first_available_variant.option2 and variants_option3_arr[forloop.index0] == value
            assign option_exists = true
            if variants_available_arr[forloop.index0]
              assign option_disabled = false
            endif
          endif
      endcase
    endfor

    if option_exists == false
      assign option_class = 'non-existent'
    elsif option_disabled == true
      assign option_class = 'unavailable'
    endif
     
    assign currentVariant = nil

    for variant in product.variants
      case option.position
        when 1
          if variant.option1 == value
            assign currentVariant = variant
            break
          endif
        when 2
          if variant.option1 == product.selected_or_first_available_variant.option1 and variant.option2 == value
            assign currentVariant = variant
            break
          endif
        when 3
          if variant.option1 == product.selected_or_first_available_variant.option1 and variant.option2 == product.selected_or_first_available_variant.option2 and variant.option3 == value
            assign currentVariant = variant
            break
          endif
      endcase
    endfor
  -%}

  {% case type %}
    {%- when 'swatches' -%}
      {% liquid
        assign hex_value = ''
        
        for color in predefined_colors
          assign color_line = color | remove: '<p>' | remove: '</p>'
          assign color_parts = color_line | split: '='
          assign option_name = color_parts[0] | strip
          assign option_hex = color_parts[1] | strip
      
          if value == option_name
            assign hex_value = option_hex
            assign current_option_name = option_name
            assign option_value_index = option_value_index | plus: 1
          endif
        endfor
      %}
      <div class="color-swatch {{ option_class }}">
        <input
          type="radio"
          id="{{ section.id }}-{{ option.position }}-{{ forloop.index0 }}"
          name="{{ option.name }}{{ custom_name_identifier }}"
          value="{{ value | escape }}"
          form="{{ product_form_id }}"
          data-swatch="true"
          {% if option.selected_value == value %}
            checked
          {% endif %}
          class="{{ option_class }}{% if option_disabled %} disabled{% endif %}"
        >
        <div class="color-swatch__image">
          {% for variant in product.variants %}
            {%- capture variant_option_key -%}
              option{{- option.position -}}
            {%- endcapture -%}

            {% assign variant_option_val = variant[variant_option_key] %}

            {% if variant_option_val == value %}
              {% if block.settings.swatches_custom_colors == 'disabled' %}
                {% if variant.image %}
                  <img
                    src="{{ variant.image | image_url: width: 200 }}"
                    alt="{{ variant_option_val }}"
                    width="auto"
                    height="auto"
                    loading="lazy"
                  >
                {% endif %}
              {% else %}
                {% liquid
                  if block.settings.swatches_custom_colors == 'image_alt'
                    assign custom_color = variant.image.alt
                  elsif block.settings.swatches_custom_colors == 'custom'
                    assign custom_color = custom_colors_arr[option_index]
                  else
                    assign custom_color = ''
                    
                    for color in predefined_colors
                      assign color_line = color | remove: '<p>' | remove: '</p>'
                      assign color_parts = color_line | split: '='
                      assign option_name = color_parts[0] | strip
                      assign option_hex = color_parts[1] | strip
                  
                      if value == option_name
                        assign custom_color = option_hex
                      endif
                    endfor
                  endif
                %}
                <div class="color-swatch__custom-color" style="--bg-color: {{ custom_color }}">&nbsp</div>
              {% endif %}
              {% break %}
            {% endif %}
          {% endfor %}
        </div>
        <label class="color-swatch_hidden-label" for="{{ section.id }}-{{ option.position }}-{{ forloop.index0 }}">
        </label>
        <span class="color-swatch__label">{{ value }}</span>
      </div>
    {%- when 'pills' -%}
      <input
        type="radio"
        id="{{ section.id }}-{{ option.position }}-{{ forloop.index0 }}"
        name="{{ option.name }}{{ custom_name_identifier }}"
        value="{{ value | escape }}"
        form="{{ product_form_id }}"
        {% if option.selected_value == value %}
          checked
        {% endif %}
        class="{{ option_class }}{% if option_disabled %} disabled{% endif %}"
      >
      <label class="accent-color-{{ settings.variant_pills_accent_color }}{% if settings.variant_pills_bold_text %} variant-pills--bold{% endif %}" for="{{ section.id }}-{{ option.position }}-{{ forloop.index0 }}">
        {{ value -}}
        <span class="visually-hidden">{{ 'products.product.variant_sold_out_or_unavailable' | t }}</span>
      </label>
    {%- when 'amount' -%}

      {% assign chews = currentVariant.metafields.custom.chews.value | abs %}
      {% assign price_per_item = currentVariant.price | divided_by: chews | money %}
      {% assign price_per_item_string = price_per_item | append: ' / chew' %}
      {% assign percentage_saved = currentVariant.compare_at_price | minus: currentVariant.price | times: 100.0 | divided_by: currentVariant.compare_at_price | floor | append: '%' %}
      
      {% assign popular = currentVariant.metafields.custom.popular.value %}
      {% assign recommended = currentVariant.metafields.custom.recommended.value %}


      <label class="sc-amount-label accent-color-{{ settings.variant_pills_accent_color }}{% if settings.variant_pills_bold_text %} variant-pills--bold{% endif %}" for="{{ section.id }}-{{ option.position }}-{{ forloop.index0 }}">
        {% if popular != blank %}
          <div class="sc-amount__popular">{{ popular }}</div>
        {% elsif recommended != blank %}
          <div class="sc-amount__recommended">{{ recommended }}</div>
        {% endif %}

        {% assign benefits = currentVariant.metafields.custom.benefits.value %}
        {% if option.selected_value == value %}
          {% assign final_benefits = benefits %}
        {% endif %}
        {%- capture benefits_html -%}
          <ul id="sc-benefits-list" class="sc-benefits__list">
            {%- for benefit in benefits -%}
              <li class="sc-benefits__item">{{ benefit }}</li>
            {%- endfor -%}
          </ul>
        {%- endcapture -%}


        {% assign one_month_benefits = currentVariant.metafields.custom.one_month_benefits.value %}
        {%- capture one_month_benefits_html -%}
          <ul id="sc-benefits-list" class="sc-benefits__list">
            {%- for benefit in one_month_benefits -%}
              <li class="sc-benefits__item">{{ benefit }}</li>
            {%- endfor -%}
          </ul>
        {%- endcapture -%}

        {% assign two_month_benefits = currentVariant.metafields.custom.two_month_benefits.value %}
        {%- capture two_month_benefits_html -%}
          <ul id="sc-benefits-list" class="sc-benefits__list">
            {%- for benefit in two_month_benefits -%}
              <li class="sc-benefits__item">{{ benefit }}</li>
            {%- endfor -%}
          </ul>
        {%- endcapture -%}

        {% assign three_month_benefits = currentVariant.metafields.custom.three_month_benefits.value %}
        {%- capture three_month_benefits_html -%}
          <ul id="sc-benefits-list" class="sc-benefits__list">
            {%- for benefit in three_month_benefits -%}
              <li class="sc-benefits__item">{{ benefit }}</li>
            {%- endfor -%}
          </ul>
        {%- endcapture -%}


        <div class="sc-package__input-block">
          <input
            type="radio"
            id="{{ section.id }}-{{ option.position }}-{{ forloop.index0 }}"
            name="{{ option.name }}{{ custom_name_identifier }}"
            value="{{ value | escape }}"
            data-chews="{{ chews }}"
            data-variant_id="{{ currentVariant.id }}"
            data-section_id="{{ section.id }}"
            data-product_handle="{{ product.handle }}"
            data-benefits_html="{{ benefits_html | strip_newlines | escape }}"
            data-one_month_benefits_html="{{ one_month_benefits_html | strip_newlines | escape }}"
            data-two_month_benefits_html="{{ two_month_benefits_html | strip_newlines | escape }}"
            data-three_month_benefits_html="{{ three_month_benefits_html | strip_newlines | escape }}"
            data-price="{{ currentVariant.price | money }}"
            data-compare_at_price="{{ currentVariant.compare_at_price | money }}"
            data-price_per_item="{{ price_per_item }}"
            form="{{ product_form_id }}"
            {% if option.selected_value == value %}
              checked
            {% endif %}
            class="{{ option_class }}{% if option_disabled %} disabled{% endif %}"
          />
        </div>  
        <div class="sc-package__value-block">
          <div class="sc-package__value-col1">
            <div class="sc-package__value-row1">
              {{ value -}}
              <span class="visually-hidden">{{ 'products.product.variant_sold_out_or_unavailable' | t }}</span>  
            </div>
            <div class="sc-package__value-row2">
              {{ price_per_item_string }}
            </div>
          </div>
          <div class="sc-package__value-col2">
            <div class="sc-package__value-save">Save {{ percentage_saved }}</div>
          </div>
          <div class="sc-package__value-col3">
            <div class="sc-package__value-price">{{ currentVariant.price | money }}</div>
          </div>
        </div>
      </label>
    {%- when 'dropdown' -%}
      <option
        value="{{ value | escape }}"
        {% if option.selected_value == value %}
          selected="selected"
        {% endif %}
        class="{{ option_class }}"
      >
        {% if option_disabled -%}
          {{- 'products.product.value_unavailable' | t: option_value: value -}}
        {%- else -%}
          {{- value -}}
        {%- endif %}
      </option>
    {% when 'quantity-breaks' %}
      <input
        type="radio"
        id="{{ section.id }}-{{ option.position }}-{{ forloop.index0 }}"
        name="{{ option.name }}{{ custom_name_identifier }}"
        value="{{ value | escape }}"
        form="{{ product_form_id }}"
        {% if option.selected_value == value %}
          checked
        {% endif %}
        class="{{ option_class }}{% if option_disabled %} disabled{% endif %}"
      >
      {% liquid
        assign price = currentVariant.price
        assign compare_price = currentVariant.compare_at_price
        assign price_difference = compare_price | minus: price
        assign price_difference_rounded = price_difference | divided_by: 100.00 | round | times: 100
        
        assign badge = badges[forloop.index0] | replace: '[empty]', '' | strip
        assign label = labels[forloop.index0] | replace: '[empty]', '' | strip
        assign benefit = benefits[forloop.index0] | replace: '[empty]', '' | strip
        assign caption = captions[forloop.index0] | replace: '[empty]', '' | strip
        assign price_text = price_texts[forloop.index0] | replace: '[empty]', '' | strip
        assign compare_price_text = compare_price_texts[forloop.index0] | replace: '[empty]', '' | strip
      %}
      <label
        class="quantity-break{% if badge != blank %} quantity-break--badge{% else %} quantity-break--no-badge{% endif %} quantity-break--badge-style-{{ block.settings.breaks_badge_style }} quantity-break--benefit-{{ block.settings.breaks_benefit_position }}"
        for="{{ section.id }}-{{ option.position }}-{{ forloop.index0 }}"
      >
        {% if badge != blank %}
          <p class="quantity-break__badge dynamic-price color-{{ block.settings.breaks_badge_color }}">
            {% render 'text-with-price',
              text: badge,
              name: value,
              price: price,
              compare_price: compare_price,
              amount_saved: price_difference,
              amount_saved_rounded: price_difference_rounded
            %}
          </p>
        {% endif %}
        <div class='quantity-break__image-and-content'>
          {% liquid
            if block.settings.breaks_displayed_images == 'variant_images'
              assign image_url = currentVariant.featured_image | image_url
            else 
             assign image_url = custom_images[forloop.index0]
            endif
          %}
          {% if image_url != blank %}
            <div class='quantity-break__image'>
              <img 
                src='{{ image_url }}'
                alt="{{ value }}"
                width='auto'
                height='auto'
                loading='lazy'
              >
            </div>
          {% endif %}
          <div class="quantity-break__content">
            <div class="quantity-break__left">
              <span class="quantity-break__label">
                {% if label != blank %}
                  <span class="quantity-break__label-text dynamic-price">
                    {% render 'text-with-price',
                      text: label,
                      name: value,
                      price: price,
                      compare_price: compare_price,
                      amount_saved: price_difference,
                      amount_saved_rounded: price_difference_rounded
                    %}
                  </span>
                {% endif %}
                {% if benefit != blank %}
                  <span class="quantity-break__benefit quantity-break__benefit--{{ block.settings.breaks_benefit_style }} accent-color-{{ block.settings.breaks_benefit_color }} dynamic-price">
                    {% render 'text-with-price',
                      text: benefit,
                      name: value,
                      price: price,
                      compare_price: compare_price,
                      amount_saved: price_difference,
                      amount_saved_rounded: price_difference_rounded
                    %}
                  </span>
                {% endif %}
              </span>
              {% if caption != blank %}
                <span class="quantity-break__caption dynamic-price">
                  {% render 'text-with-price',
                    text: caption,
                    name: value,
                    price: price,
                    compare_price: compare_price,
                    amount_saved: price_difference,
                    amount_saved_rounded: price_difference_rounded
                  %}
                </span>
              {% endif %}
            </div>
            <div class="quantity-break__right dynamic-price">
              {% if price_text != blank %}
                <span class="quantity-break__price">
                  {% render 'text-with-price',
                    text: price_text,
                    name: value,
                    price: price,
                    compare_price: compare_price,
                    amount_saved: price_difference,
                    amount_saved_rounded: price_difference_rounded
                  %}
                </span>
              {% endif %}
              {% if compare_price > price and compare_price_text != blank %}
                <span class="quantity-break__compare-price">
                  {% render 'text-with-price',
                    text: compare_price_text,
                    name: value,
                    price: price,
                    compare_price: compare_price,
                    amount_saved: price_difference,
                    amount_saved_rounded: price_difference_rounded
                  %}
                </span>
              {%- endif -%}
            </div>
          </div>
        </div>
      </label>
  {% endcase %}
{%- endfor -%}

<div class="sc-subscription-box">
  <label class="sc-switch">
    <input type="checkbox" name="show_loop_checkbox">
    <span class="sc-slider"></span>
  </label>
  <div class="sc-subscription-text">
    <strong>Save more with a subscription</strong>
    {% comment %} <br><span>You're in control, easy <a href="#">cancel online</a></span> {% endcomment %}
  </div>
</div>

<div id="sc-benefits" class="sc-benefits">
  <ul id="sc-benefits-list" class="sc-benefits__list">
    {% for benefit in final_benefits %}
      <li class="sc-benefits__item">{{ benefit }}</li>
    {% endfor %}
  </ul>
</div>

<div id="sc-loop" class="sc-loop-hide">
  {% render loop_subscriptions_block %}
</div>

<script>
  document.addEventListener("DOMContentLoaded", () => {
    console.log(`%c ### sc-product-variant-options.liquid v0.111 ###`, `color: red; font-weight:bold; background-color: yellow;`);

    //Change Benefits on Amount change
    const currentBenefits = document.getElementById('sc-benefits');
    const loopContainer = document.getElementById('sc-loop');
    const radios = document.querySelectorAll('input[name="Amount"]');
    const show_loop = document.querySelector('input[name="show_loop_checkbox"]');

    function handleSelectChange(event, selectElement) {
        console.log(`%c function handleSelectChange(event, selectElement) {`, `color: red; font-weight:bold; background-color: yellow;`);
        
        console.log('Значення селекту змінилося:', event.target.value);
        const selectedText = event.target.options[event.target.selectedIndex].text;
        console.log('Текст вибраної опції:', selectedText);

        if(currentBenefits){
          const selectedRadio = document.querySelector('input[name="Amount"]:checked');
          if(selectedRadio){
            const one_month_benefits_html = selectedRadio.dataset.one_month_benefits_html;
            const two_month_benefits_html = selectedRadio.dataset.two_month_benefits_html;
            const three_month_benefits_html = selectedRadio.dataset.three_month_benefits_html;

            if(selectedText.includes('every month')){
              currentBenefits.innerHTML = one_month_benefits_html;
            } else if(selectedText.includes('every 2 months')){
              currentBenefits.innerHTML = two_month_benefits_html;
            } else if(selectedText.includes('every 3 months')){
              currentBenefits.innerHTML = three_month_benefits_html;
            } else {
              currentBenefits.innerHTML = one_month_benefits_html;
            }
          }
        }

        //Set Dynamic Price on submit button
        // if(show_loop.checked){
          // console.log(`%c if(show_loop.checked){`, `color: red; font-weight:bold; background-color: yellow;`);

          // Subscriptions Loop is shown
          setTimeout(() => {
            const loopSelectedPriceElement = document.querySelector('.loop-widget-purchase-option-selected .loop-widget-purchase-option-price');
            console.dir(`loopSelectedPriceElement`);
            console.dir(loopSelectedPriceElement);
            
            const priceButtonText = document.getElementById('sc-button-text');

            const loopSelectedPrice = loopSelectedPriceElement ? loopSelectedPriceElement.innerText : 'price undefined';
            console.log(`%c loopSelectedPrice`, `color: red; font-weight:bold; background-color: yellow;`);
            console.dir(loopSelectedPrice);

            priceButtonText.innerText = `• ${loopSelectedPrice}`;
          }, 0);
        // }

    }


    function subscribeSelectorEvent(){
      console.log(`%c subscribeSelectorEvent(){`, `color: red; font-weight:bold; background-color: yellow;`);

      // Створюємо MutationObserver для відстеження змін у DOM
      const observer = new MutationObserver((mutations) => {
        console.log(`%c MutationObserver `, `color: red; font-weight:bold; background-color: yellow;`);
        mutations.forEach((mutation) => {
          console.log(`%c mutation `, `color: red; font-weight:bold; background-color: yellow;`);
          // Перевіряємо, чи додано нові вузли
          // if (mutation.addedNodes.length) {
            // Шукаємо елемент select з атрибутом name="selling_plan"
            const selectElement = document.querySelector('select[name="selling_plan"]');
            console.dir(`selectElement:`);console.dir(selectElement);
            if (selectElement) {

              // Додаємо обробник події change
              selectElement.addEventListener('change', (event) => {
                handleSelectChange(event, selectElement);
              });
              // Після знаходження елемента можна відключити observer, якщо потрібно
              observer.disconnect();
            }
          // }
        });
      });

      // Налаштування MutationObserver для відстеження додавання вузлів у DOM
      observer.observe(document.body, {
        childList: true,
        subtree: true
      });



    }


    function changeVariant(event){
      console.log(`%c changeVariant(){`, `color: red; font-weight:bold; background-color: yellow;`);

      
      const selected = event.target;
      const value = selected.value;
      const monthNumber = parseInt(value.match(/\d+/)[0]);

      const benefits_html = selected.dataset.benefits_html;

      const one_month_benefits_html = selected.dataset.one_month_benefits_html;
      const two_month_benefits_html = selected.dataset.two_month_benefits_html;
      const three_month_benefits_html = selected.dataset.three_month_benefits_html;

      const subscribeSelectElement = document.querySelector('select[name="selling_plan"]');
      console.dir(`subscribeSelectElement:`);console.dir(subscribeSelectElement);
      subscribeSelectElement.value = "Deliver every 3 months"; 
      subscribeSelectElement.dispatchEvent(new Event("change"));


      if(currentBenefits){
        if(show_loop.checked){
          // Subscriptions Loop is shown
          const loop_widget_sp_selector = document.querySelector('.loop-widget-sp-selector');
          const selectedOption = loop_widget_sp_selector.options[loop_widget_sp_selector.selectedIndex];
          const selectedText = selectedOption.text;

          console.log(`%c selectedText`, `color: red; font-weight:bold; background-color: yellow;`);
          console.dir(selectedText);

          if(selectedText.includes('every month')){
            currentBenefits.innerHTML = one_month_benefits_html;
          } else if(selectedText.includes('every 2 months')){
            currentBenefits.innerHTML = two_month_benefits_html;
          } else if(selectedText.includes('every 3 months')){
            currentBenefits.innerHTML = three_month_benefits_html;
          } else {
            currentBenefits.innerHTML = one_month_benefits_html;
          }

          subscribeSelectorEvent();
        } else {
          // Subscriptions Loop is hidden
          currentBenefits.innerHTML = benefits_html;
        }
      }

      //Set Dynamic Price on submit button 
      const priceButtonText = document.getElementById('sc-button-text');
      if(show_loop.checked){
        // Subscriptions Loop is shown
      } else {
        const simpleSelectedVariantPrice = selected.dataset.price;
        priceButtonText.innerText = `• ${simpleSelectedVariantPrice}`;
      }


    }

    radios.forEach(radio => {
      radio.addEventListener("change", async (event) => {
        console.log(`%c radio.addEventListener("change", async (event) => {`, `color: red; font-weight:bold; background-color: yellow;`);

        changeVariant(event);
      });
    });


    function changeFirstVariant(event){
      console.log(`%c changeFirstVariant(){`, `color: red; font-weight:bold; background-color: yellow;`);

      const selected = document.querySelector('input[name="Amount"]:checked');
      if(selected){
        changeVariant({target: selected});
      }
    }

    const firstRadios = document.querySelectorAll('input[name="Dog size"]');
    firstRadios.forEach(radio => {
      radio.addEventListener("change", async (event) => {
        console.log(`%c firstRadios.forEach(radio => {`, `color: red; font-weight:bold; background-color: yellow;`);

        changeFirstVariant(event);
      });
    });




    function showLoop(){
      console.log(`%c showLoop(){`, `color: red; font-weight:bold; background-color: yellow;`);

      if(loopContainer){
        loopContainer.classList.remove('sc-loop-hide');

        subscribeSelectorEvent();
      }
    }

    function hideLoop(){
      console.log(`%c function hideLoop(){`, `color: red; font-weight:bold; background-color: yellow;`);

      if(loopContainer){
        loopContainer.classList.add('sc-loop-hide');
      }
    }

    //Show/Hide Loop
    show_loop.addEventListener("change", async (event) => {
      console.log(`%c show_loop.addEventListener("change", async (event) => {`, `color: red; font-weight:bold; background-color: yellow;`);

      const loopContainer = document.getElementById('sc-loop');
      if(event.target.checked){
        // Show Loop
        showLoop();
      } else {
        // Hide Loop
        hideLoop();
      }
    });




  });
</script>
<!-- snippets/sc-product-variant-options.liquid END -->
